def is_safe(board, row, col, N):
    # Check if a queen can be placed in board[row][col]
    for i in range(row):
        if board[i][col] == 1:
            return False
    
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    
    for i, j in zip(range(row, -1, -1), range(col, N)):
        if board[i][j] == 1:
            return False
    
    return True

def solve_n_queens_util(board, row, N, result):
    # Base case: All queens are placed successfully
    if row == N:
        result.append([row[:] for row in board])
        return

    for col in range(N):
        if is_safe(board, row, col, N):
            board[row][col] = 1
            solve_n_queens_util(board, row + 1, N, result)
            board[row][col] = 0  # Backtrack if placement is unsuccessful

def solve_n_queens(N):
    board = [[0 for _ in range(N)] for _ in range(N)]
    result = []
    solve_n_queens_util(board, 0, N, result)
    return result

# Example to solve the N-Queens problem for N = 4
N = 4
solutions = solve_n_queens(N)
for solution in solutions:
    for row in solution:
        print(' '.join('Q' if col == 1 else '.' for col in row))
    print()
